import random as r
import time as t
import numpy as np

# alt+219 = █
# alt+254 = ■
# ⬛

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #



# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #

def afficher_dimentional(table,dimensions):
    if(dimensions == 2):
        nb_lignes = len(table)
        nb_colonnes = len(table[0])
        for i in range(nb_lignes):
            for j in range(nb_colonnes):
                print(table[i][j], end=" ")
            print("")

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #



# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #

def check(tableau):
    
    list_voisin=[-1,1]
    nb_lignes = len(tableau)
    nb_colonnes = len(tableau[0])
    #print(nb_lignes,nb_colonnes)
    colonnes = np.array([0 for i in range(nb_colonnes)])
    nb_cells_list = np.array([colonnes for i in range(nb_lignes)])
    """lignes = np.array([0 for i in range(nb_lignes)])
    nb_cells_list = np.array([lignes for i in range(nb_colonnes)])"""
    #print(nb_cells_list)
    
    nb_cells = 0
    
    for i in range(nb_lignes):
        for j in range(nb_colonnes):
            for k in list_voisin:
                #if(i == 3 and j == 12):
                    #print('|'+tableau[i-k][j+k]+'|')
                # check horizontal
                if (j+k >= 0 and j+k < nb_colonnes):
                    if(tableau[i][j+k] == '■'):
                        nb_cells += 1
                
                # check vertical
                if (i+k >= 0 and i+k < nb_lignes):
                    if(tableau[i+k][j] == '■'):
                        nb_cells += 1
                
                
                # check diagonale     
                if (i+k >= 0 and i+k < nb_lignes) and (j+k >= 0 and j+k < nb_colonnes):
                    if(tableau[i+k][j+k] == '■'):
                        nb_cells += 1
                
                if (i-k >= 0 and i-k < nb_lignes) and (j+k >= 0 and j+k < nb_colonnes):
                    if(tableau[i-k][j+k] == '■'):
                        nb_cells += 1
            #print(i,j,nb_cells)
            nb_cells_list[i][j] = nb_cells
            nb_cells = 0
        #print(j)
    #print(i)
    #afficher_dimentional(tableau,2)
    #print(nb_cells_list[3][12])
    #print(nb_cells_list)        
    return nb_cells_list

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #



# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #

def change_etat(table, nb_cells):
    
    nb_lignes = len(table)
    nb_colonnes = len(table[0])
    #print(nb_lignes,nb_colonnes)
    #print(table[3][11],nb_cells[3][11])
    nouv_etat = table
    
    for i in range(nb_lignes):
        for j in range(nb_colonnes):
            if (nb_cells[i][j] < 2 or nb_cells[i][j] > 3) and (table[i][j] == '■'):
                nouv_etat[i][j] = ' '
            
            if (nb_cells[i][j] == 3) and (table[i][j] == ' '):
                nouv_etat[i][j] = '■'
            #print(nouv_etat[i][j],table[i][j])
        #print(j)
    #print(i)
    return nouv_etat

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #



# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #

# différentes formations:
# random
# planeur
# grenouille
#
def formation(laFormation: str):
    if(laFormation == 'Random'):
        ligne = np.array([ ' ' for i in range(10)])
        tableau = np.array([ ligne for i in range(10)])
        
        cell_dep=0
        nbr_cell_dep = int((len(tableau)*len(tableau[0]))/3)
        
        while(cell_dep < nbr_cell_dep):
            
            ligne = r.randrange(10)
            colonne = r.randrange(10)
            #print(ligne,colonne)
            
            if(tableau[ligne][colonne] == ' '):
                tableau[ligne][colonne] = '■'
                #print(tableau)
                cell_dep += 1
    elif (laFormation == 'Planeur'):
        tableau =np.array([
                  [' ','■',' ',' ',' ',' ',' ',' ']
                 ,[' ',' ','■',' ',' ',' ',' ',' ']
                 ,['■','■','■',' ',' ',' ',' ',' ']
                 ,[' ',' ',' ',' ',' ',' ',' ',' ']
                 ,[' ',' ',' ',' ',' ',' ',' ',' ']
                 ,[' ',' ',' ',' ',' ',' ',' ',' ']
                 ,[' ',' ',' ',' ',' ',' ',' ',' ']
                 ,[' ',' ',' ',' ',' ',' ',' ',' ']
                 ])
    elif (laFormation == 'Grenouille'):
        tableau = np.array(
                  [ [' ',' ',' ',' ']
                   ,[' ','■','■','■']
                   ,['■','■','■',' ']
                   ,[' ',' ',' ',' ']])
    elif (laFormation == 'Canon'):
        tableau = np.array([
                    [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■',' ','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■','■',' ',' ',' ',' ',' ',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■','■']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ','■',' ',' ',' ',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■','■']
                   ,['■','■',' ',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ',' ',' ','■',' ',' ',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,['■','■',' ',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ','■',' ','■','■',' ',' ',' ',' ','■',' ','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ',' ',' ','■',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '] 
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ])
    elif (laFormation == 'Moulin'):
        tableau = np.array([
                    [' ',' ',' ',' ',' ']
                   ,[' ',' ','■',' ',' ']
                   ,[' ',' ','■',' ',' ']
                   ,[' ',' ','■',' ',' ']
                   ,[' ',' ',' ',' ',' '] 
        ])
    elif (laFormation == 'Spaceship1'):
        tableau = np.array([
                    [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,['■','■',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,['■','■','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '] 
                   ])
    elif (laFormation == 'Spaceship2'):
        tableau = np.array([
                    [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,['■','■','■',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,['■','■','■','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ','■','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '] 
                   ])
    elif (laFormation == 'Spaceship3'):
        tableau = np.array([
                    [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,['■','■','■','■',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,['■','■','■','■','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ','■','■','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '] 
                   ])
    elif (laFormation == 'Pulsar'):
        tableau = np.array([
            [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ','■','■','■',' ',' ',' ','■','■','■',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ','■',' ',' ',' ',' ','■',' ','■',' ',' ',' ',' ','■',' ',' ',' ']
           ,[' ',' ',' ',' ','■',' ',' ',' ',' ','■',' ','■',' ',' ',' ',' ','■',' ',' ',' ']
           ,[' ',' ',' ',' ','■',' ',' ',' ',' ','■',' ','■',' ',' ',' ',' ','■',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ','■','■','■',' ',' ',' ','■','■','■',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ','■','■','■',' ',' ',' ','■','■','■',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ','■',' ',' ',' ',' ','■',' ','■',' ',' ',' ',' ','■',' ',' ',' ']
           ,[' ',' ',' ',' ','■',' ',' ',' ',' ','■',' ','■',' ',' ',' ',' ','■',' ',' ',' ']
           ,[' ',' ',' ',' ','■',' ',' ',' ',' ','■',' ','■',' ',' ',' ',' ','■',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ','■','■','■',' ',' ',' ','■','■','■',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '] 
        ])



        # minimum sized glider gun
        """np.array([
                    [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■',' ','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■','■',' ',' ',' ',' ',' ',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■','■']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ','■',' ',' ',' ',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■','■']
                   ,['■','■',' ',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ',' ',' ','■',' ',' ',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,['■','■',' ',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ','■',' ','■','■',' ',' ',' ',' ','■',' ','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ',' ',' ','■',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■',' ',' ',' ','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','■','■',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '] 
                   ])"""

        # pattern void long
        """np.array([
                    [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '] 
                   ])"""
        
        # pattern void carré 5x5
        """np.array([
                    [' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' ']
                   ,[' ',' ',' ',' ',' '] 
        ])"""

        # pattern void carré 20x20
        """ np.array([
            [' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ']
           ,[' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' '] 
        ])
        """

    return tableau

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #



# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #

def jeu_de_la_vie(nbr_tours: int,laFormation: str):
    
    #nbr_tours = int(temps/1)
    table_vie = formation(laFormation)
    
    for i in range(nbr_tours):
        print('tour n°'+str(i+1))
        
        afficher_dimentional(table_vie,2)
        print('')
        
        table_vie = change_etat(table_vie, check(table_vie))
        t.sleep(0.33)

# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #



# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////// #


#jeu_de_la_vie(30,'Pulsar')
    
#jeu_de_la_vie(25, 'Spaceship1')
    
#jeu_de_la_vie(25, 'Spaceship2')

#jeu_de_la_vie(25, 'Spaceship3')

#jeu_de_la_vie(10, 'Moulin')
    
#jeu_de_la_vie(100, 'Canon')

#jeu_de_la_vie(45, 'Random')

#jeu_de_la_vie(20,'Planeur')